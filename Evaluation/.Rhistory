newRow <- c(domain)
result <- data.frame(domain=c(), problems=c())
for(domain in unique(data$domain)
{
result <- data.frame(domain=c(), problems=c())
for(domain in unique(data$domain))
{
newRow <- c(domain)
}
result <- newRow
result[domain] <- newRow
result <- data.frame(domain=c(), problems=c())
for(domain in unique(data$domain))
{
newRow <- c(domain)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(domain=c(), problems=c())
for(domain in unique(data$domain))
{
newRow <- c(domain)
result <- data.frame(domain=c(), problems=c())
for(domain in unique(data$domain))
{
newRow <- c(domain)
result[domain] <- newRow
}
newRow <- c(domain)
View(result)
View(result)
setwd("D:/kris7/OneDrive/Programming/University/P10/Evaluation")
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(domain=c(), problems=c())
for(domain in unique(data$domain))
{
newRow <- c(domain)
library(dplyr)
source("Tools/style.R")
setwd("D:/kris7/OneDrive/Programming/University/P10/Evaluation")
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "refinement.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric',
'character','character',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
tableData <- data %>% select(
contains('domain'),
contains('final.refinement.possibilities'),
contains('valid.refinements'),
contains('succeded'))
names(tableData)[names(tableData) == "succeded"] <- "unrefinable"
tableData$unrefinable[tableData$unrefinable == "True"] <- 0
tableData$unrefinable[tableData$unrefinable == "False"] <- 1
tableData$unrefinable <- as.numeric(as.character(tableData$unrefinable))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
View(tableData)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "refinement.csv"
args[2] <- "CPDDLMutexed+UsedInPlans+ReducesMetaSearchTimeTop2"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric',
'character','character',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
tableData <- data %>% select(
contains('domain'),
contains('final.refinement.possibilities'),
contains('valid.refinements'),
contains('succeded'))
names(tableData)[names(tableData) == "succeded"] <- "unrefinable"
tableData$unrefinable[tableData$unrefinable == "True"] <- 0
tableData$unrefinable[tableData$unrefinable == "False"] <- 1
tableData$unrefinable <- as.numeric(as.character(tableData$unrefinable))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
alreadyValid <- data %>% select(
contains('domain'),
contains('already.valid')
)
alreadyValid$already.valid[alreadyValid$already.valid == "True"] <- 1
alreadyValid$already.valid[alreadyValid$already.valid == "False"] <- 0
alreadyValid$already.valid <- as.numeric(as.character(alreadyValid$already.valid))
alreadyValid <- aggregate(. ~ domain, data=alreadyValid, FUN=sum)
for(domain in unique(tableData$domain)){
tableData$valid.refinements[tableData$domain == domain] <- tableData$valid.refinements[tableData$domain == domain] - alreadyValid$already.valid[alreadyValid$domain == domain]
}
generate_table(
tableData,
paste("out/refinement.tex", sep = ""),
c(
"$Domain$",
"$R$",
"$R_{valid}$",
"$Unrefinable$"
),
"\\textit{Refinement Process Info. $R$ is the initial refinement options for all the candidates for a domain. $R_{valid}$ is the valid refinement options. Unrefinables are potential failures.}",
"tab:refinement"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed+UsedInPlans+ReducesMetaSearchTimeTop2"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Final.Output <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('total.candidates'),
contains('pre.not.useful.removed'),
contains('total.refined'),
contains('post.not.useful.removed'),
contains('final.output'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
generate_table(
tableData,
paste("out/usefulness.tex", sep = ""),
c(
"$Domain$",
"$C$",
"$U_{pre}$",
"$C_{valid}$",
"$U_{post}$",
"$M$"
),
"\\textit{Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.}",
"tab:usefulness"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed+UsedInPlans+ReducesMetaSearchTimeTop2"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Final.Output <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('total.candidates'),
contains('pre.not.useful.removed'),
contains('total.refined'),
contains('post.not.useful.removed'),
contains('final.output'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
generate_table(
tableData,
paste("out/usefulness.tex", sep = ""),
c(
"$Domain$",
"$C$",
"$U_{pre}$",
"$C_{valid}$",
"$U_{post}$",
"$M$"
),
"\\textit{Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.}",
"tab:usefulness"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed+UsedInPlans+ReducesMetaSearchTimeTop2"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Final.Output <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('total.candidates'),
contains('pre.not.useful.removed'),
contains('total.refined'),
contains('post.not.useful.removed'),
contains('final.output'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
generate_table(
tableData,
paste("out/usefulness.tex", sep = ""),
c(
"$Domain$",
"$C$",
"$U_{pre}$",
"$C_{valid}$",
"$U_{post}$",
"$M$"
),
"\\textit{Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.}",
"tab:usefulness"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), P=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
generate_table(
result,
paste("out/coverage.tex", sep = ""),
colnames(result),
"\\textit{Coverage of how many problems each method was able to solve within the time limit.}",
"tab:coverage"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), P=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
generate_table(
result,
paste("out/coverage.tex", sep = ""),
colnames(result),
"\\textit{Coverage of how many problems each method was able to solve within the time limit.}",
"tab:coverage"
)
