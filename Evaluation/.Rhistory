colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric'
)
)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric'
)
)
generalData <- rename_domains_testing(generalData)
data <- rename_data(data)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "general.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
args[4] <- "S_CPDDL"
args[5] <- "LAMA_FIRST"
if (length(args) != 5) {
stop("5 arguments must be supplied!", call.=FALSE)
}
generalData <- read.csv(
args[2],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric'
)
)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric'
)
)
generalData <- rename_domains(generalData)
data <- rename_domains_testing(data)
data <- rename_data(data)
View(data)
metaDomains <- generalData[generalData$Total.Refined - generalData$Post.Not.Useful.Removed > 0,]$domain
data <- data[data$domain %in% metaDomains,]
View(data)
unique(data$domain)
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "general.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
args[4] <- "S_CPDDL"
args[5] <- "LAMA_FIRST"
if (length(args) != 5) {
stop("5 arguments must be supplied!", call.=FALSE)
}
generalData <- read.csv(
args[2],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric'
)
)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric'
)
)
generalData <- rename_domains(generalData)
data <- rename_domains_testing(data)
data <- rename_data(data)
metaDomains <- generalData[generalData$Total.Refined - generalData$Post.Not.Useful.Removed > 0,]$domain
data <- data[data$domain %in% metaDomains,]
AName <- recon_names(args[4])
BName <- recon_names(args[5])
if (nrow(data[data$name == AName,]) == 0)
stop(paste("Column name '", args[2], "' not found in dataset!"), call.=FALSE)
if (nrow(data[data$name == BName,]) == 0)
stop(paste("Column name '", args[3], "' not found in dataset!"), call.=FALSE)
data <- max_unsolved(data, "total_time")
data <- max_unsolved(data, "search_time")
#data <- max_unsolved(data, "solution_time")
data <- max_unsolved(data, "plan_length")
#data <- max_unsolved(data, "meta_plan_length")
AData = data[data$name == AName,]
#AData$problem <- sub('[.]', '_', make.names(AData$problem, unique=TRUE))
BData = data[data$name == BName,]
#BData$problem <- sub('[.]', '_', make.names(BData$problem, unique=TRUE))
combined <- merge(AData, BData, by = c("domain", "problem"), suffixes=c(".A", ".B"))
combined <- combined %>% select(-contains('name.A'))
combined <- combined %>% select(-contains('name.B'))
dir.create(file.path("out"), showWarnings = FALSE)
print("Generating: Search Scatterplot")
sideA <- combined$search_time.A
sideB <- combined$search_time.B
sideDomains <- combined$domain
searchData <- data.frame(x = sideA, y = sideB, domain = sideDomains)
generate_scatterplot(searchData, AName, BName, "Search Time (s)", paste("out/searchTime_", AName, "_vs_", BName, ".pdf", sep = ""))
print("Generating: Total Scatterplot")
sideA <- combined$total_time.A
sideB <- combined$total_time.B
sideDomains <- combined$domain
searchData <- data.frame(x = sideA, y = sideB, domain = sideDomains)
generate_scatterplot(searchData, AName, BName, "Total Time (s)", paste("out/totalTime_", AName, "_vs_", BName, ".pdf", sep = ""))
#print("Generating: Solve Scatterplot")
#sideA <- combined$solution_time.A
#sideB <- combined$solution_time.B
#sideDomains <- combined$domain
#searchData <- data.frame(x = sideA, y = sideB, domain = sideDomains)
#generate_scatterplot(searchData, AName, BName, "Solution Time (s)", paste("out/solutionTime_", AName, "_vs_", BName, ".pdf", sep = ""))
#print("Generating: Meta Plan length Scatterplot")
#sideA <- combined$meta_plan_length.A
#sideB <- combined$plan_length.B
#sideDomains <- combined$domain
#searchData <- data.frame(x = sideA, y = sideB, domain = sideDomains)
#generate_scatterplot(searchData, AName, BName, "Meta Plan Length", paste("out/metaPlanLength_", AName, "_vs_", BName, ".pdf", sep = ""))
print("Generating: Final Plan length Scatterplot")
sideA <- combined$plan_length.A
sideB <- combined$plan_length.B
sideDomains <- combined$domain
searchData <- data.frame(x = sideA, y = sideB, domain = sideDomains)
generate_scatterplot(searchData, AName, BName, "Plan Length", paste("out/planLength_", AName, "_vs_", BName, ".pdf", sep = ""))
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
source("Tools/FileParsing/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
#args[1] <- "solve.csv"
#args[2] <- "general.csv"
#args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
#args[4] <- "S_CPDDL"
#args[5] <- "LAMA_FIRST"
if (length(args) != 5) {
stop("5 arguments must be supplied!", call.=FALSE)
}
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
source("Tools/FileParsing/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "general.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
args[4] <- "S_CPDDL"
args[5] <- "LAMA_FIRST"
if (length(args) != 5) {
stop("5 arguments must be supplied!", call.=FALSE)
}
generallData <- parse_general(args[2])
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
source("Tools/FileParsing/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "general.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
args[4] <- "S_CPDDL"
args[5] <- "LAMA_FIRST"
if (length(args) != 5) {
stop("5 arguments must be supplied!", call.=FALSE)
}
generalData <- parse_general(args[2])
data <- parse_solve(args[1])
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
source("Tools/FileParsing/parsers.R")
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
source("Tools/FileParsing/parsers.R")
source("Tools/FileParsing/parsers.R")
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
source("Tools/parsers.R")
library(dplyr)
source("Tools/style.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/clamper.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "general.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
args[4] <- "S_CPDDL"
args[5] <- "LAMA_FIRST"
if (length(args) != 5) {
stop("5 arguments must be supplied!", call.=FALSE)
}
generalData <- parse_general(args[2])
data <- parse_solve(args[1])
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- parse_general(args[1])
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[2],]
# Do note, these are just hardcoded mutex group numbers in here, since they never change.
namevector <- c("Mutex.Groups")
data[ , namevector] <- NA
data$Mutex.Groups[data$domain == "barman"] <- 9
data$Mutex.Groups[data$domain == "blocksworld"] <- 3
data$Mutex.Groups[data$domain == "child-snack"] <- 1
data$Mutex.Groups[data$domain == "depots"] <- 6
data$Mutex.Groups[data$domain == "driverlog"] <- 4
data$Mutex.Groups[data$domain == "floor-tile"] <- 3
data$Mutex.Groups[data$domain == "grid"] <- 4
data$Mutex.Groups[data$domain == "gripper-strips"] <- 3
data$Mutex.Groups[data$domain == "hiking"] <- 5
data$Mutex.Groups[data$domain == "logistics-strips"] <- 1
data$Mutex.Groups[data$domain == "miconic"] <- 1
data$Mutex.Groups[data$domain == "parking"] <- 3
data$Mutex.Groups[data$domain == "rover"] <- 4
data$Mutex.Groups[data$domain == "satellite"] <- 1
data$Mutex.Groups[data$domain == "scanalyzer3d"] <- 2
data$Mutex.Groups[data$domain == "woodworking"] <- 7
data$Pre.Not.Useful_ <- data$Total.Candidates - data$Pre.Not.Useful.Removed
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Post.Not.Useful_ <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('mutex.groups'),
contains('total.candidates'),
contains('pre.not.useful_'),
contains('total.refined'),
contains('post.not.useful_'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
View(groups)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
View(groups)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
View(groups)
data <- merge(data, groups)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
data <- merge(data, groups)
View(data)
data <- parse_general(args[1])
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
data <- merge(data, groups)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
data <- merge(data, groups)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
source("Tools/parsers.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "mutexgroups.csv"
args[3] <- "CPDDLMutexed+ReducesPlanLengthTop10+ReducesPlanLengthTop2"
if (length(args) != 3) {
stop("3 arguments must be supplied!", call.=FALSE)
}
data <- parse_general(args[1])
data <- data[data$id == args[3],]
groups <- parse_mutex_groups(args[2])
data <- merge(data, groups)
data$Pre.Not.Useful_ <- data$Total.Candidates - data$Pre.Not.Useful.Removed
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Post.Not.Useful_ <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('mutex.groups'),
contains('total.candidates'),
contains('pre.not.useful_'),
contains('total.refined'),
contains('post.not.useful_'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
generate_table(
tableData,
paste("out/usefulness.tex", sep = ""),
c(
"$Domain$",
"$G$",
"$C$",
"$C_{pre}$",
"$M_{valid}$",
"$M_{post}$"
),
"\\textit{Usefulness pruning information. $G$ is the amount of mutex groups for each domain. $C$ is the initial candidate meta actions. $C_{pre}$ is the candidates after the pre-usefulness check. $M_{valid}$ is the valid refined meta actions. $M_{post}$ is the valid meta actions after the post-usefulness check.}",
"tab:usefulness"
)
