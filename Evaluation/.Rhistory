result[target] <- c()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result <- rbind(result, newRow)
}
View(result)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(domain=c(), problems=c())
for(target in targets)
result[target] <- c()
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result <- rbind(result, newRow)
View(result)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(domain=c(), problems=c())
for(target in targets)
result[target] <- c()
for(domain in unique(data$domain))
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
colnames(results, c("domain","problems",targets))
colnames(result, c("domain","problems",targets))
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(domain=c(), problems=c())
for(target in targets)
result[target] <- c()
colnames(result, c("domain","problems",targets))
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
View(result)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(domain=c(), problems=c())
for(target in targets)
result[target] <- c()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
result <- data.frame(domain=c(), problems=c())
for(target in targets)
result[target] <- c("")
result <- data.frame(domain=c(), problems=c())
for(target in targets)
result[target] <- c()
result <- data.frame(domain=c(), problems=c())
colnames(result, c("domain","problems",targets))
result <- data.frame(domain=character(), problems=integer())
for(target in targets)
result[target] <- c()
View(result)
result <- data.frame(domain=character(), problems=integer())
for(target in targets)
result[target] <- integer()
View(result)
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
View(data)
View(result)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), Problems=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
View(result)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), Problems=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
generate_table(
result,
paste("out/coverage.tex", sep = ""),
c(),
"\\textit{Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.}",
"tab:usefulness"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), Problems=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
generate_table(
result,
paste("out/coverage.tex", sep = ""),
colnames(results),
"\\textit{Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.}",
"tab:usefulness"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), Problems=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
generate_table(
result,
paste("out/coverage.tex", sep = ""),
colnames(result),
"\\textit{Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.}",
"tab:usefulness"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), Problems=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
generate_table(
result,
paste("out/coverage.tex", sep = ""),
colnames(result),
"\\textit{Coverage of how many problems each method was able to solve within the time limit.}",
"tab:coverage"
)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "solve.csv"
args[2] <- "S_CPDDL"
args[3] <- "LAMA_FIRST"
if (length(args) < 1) {
stop("At least 1 argument must be supplied! The source data file, and one for each target reconstruction type", call.=FALSE)
}
targets <- args[2:length(args)]
for(target in targets)
targets[targets == target] <- recon_names(target)
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character','character','character',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric','numeric', 'numeric',
'numeric'
)
)
data <- rename_data(data)
solved <- data[data$exit_code == 0,]
result <- data.frame(Domain=character(), P=integer())
for(target in targets)
result[target] <- integer()
for(domain in unique(data$domain))
{
newRow <- c(domain,length(unique(data[data$domain == domain,]$problem)))
for(target in targets){
this <- solved[solved$name == target,]
this <- this[this$domain == domain,]
newRow <- c(newRow, length(this$problem))
}
result[nrow(result) + 1,] = newRow
}
generate_table(
result,
paste("out/coverage.tex", sep = ""),
colnames(result),
"\\textit{Coverage of how many problems each method was able to solve within the time limit.}",
"tab:coverage"
)
