data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
rename_domains(data)
data <- data[data$id == args[2],]
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Final.Output <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('total.candidates'),
contains('pre.not.useful.removed'),
contains('total.refined'),
contains('post.not.useful.removed'),
contains('final.output'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
generate_table(
tableData,
paste("out/usefulness.tex", sep = ""),
c(
"$Domain$",
"$C$",
"$U_{pre}$",
"$C_{valid}$",
"$U_{post}$",
"$M$"
),
"Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found in the end.. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.",
"tab:usefulness"
)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Final.Output <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('total.candidates'),
contains('pre.not.useful.removed'),
contains('total.refined'),
contains('post.not.useful.removed'),
contains('final.output'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Final.Output <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('total.candidates'),
contains('pre.not.useful.removed'),
contains('total.refined'),
contains('post.not.useful.removed'),
contains('final.output'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
View(data)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
View(data)
data[data$domain == "barman"] <- "Barman"
View(data)
data[data$domain == "barman"] <- "Barman"
View(data)
data <- data[data$domain == "barman"] <- "Barman"
View(tableData)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- data[data$domain == "barman",] <- "Barman"
View(tableData)
data <- data[data$domain == "barman",]$domain <- "Barman"
data <- data[data$domain == "barman"]$domain <- "Barman"
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- data[data$domain == "barman"]$domain <- "Barman"
domains <- data$domain
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
domains <- data$domain
domains["barman"] <- "Barman"
domains <- domains["barman"] <- "Barman"
domains <- data$domain
domains <- domains["barman",] <- "Barman"
domains["barman",] <- "Barman"
domains["barman",] <- "Barman_"
domains[domains == "barman",] <- "Barman"
domains[domains == "barman"] <- "Barman"
data$domain <- domains
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
domains <- data$domain
domains[domains == "barman"] <- "Barman"
domains[domain == "blocksworld"] <- "Blocksworld"
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
domains <- data$domain
domains[domains == "barman"] <- "Barman"
domains[domain == "blocksworld"] <- "Blocksworld"
domains <- data$domain
domains[domains == "barman"] <- "Barman"
domains[domain == "blocksworld"] <- "Blocksworld"
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
domains <- data$domain
domains[domains == "barman"] <- "Barman"
domains[domains == "blocksworld"] <- "Blocksworld"
domains[domains == "child-snack"] <- "Childsnack"
domains[domains == "depots"] <- "Depots"
domains[domains == "driverlog"] <- "Driverlog"
domains[domains == "floor-tile"] <- "Floortile"
domains[domains == "grid"] <- "Grid"
domains[domains == "gripper-strips"] <- "Gripper"
domains[domains == "hiking"] <- "Hiking"
domains[domains == "logistics-strips"] <- "Logistics"
domains[domains == "miconic"] <- "Miconic"
domains[domains == "parking"] <- "Parking"
domains[domains == "rover"] <- "Rover"
domains[domains == "satellite"] <- "Satellite"
domains[domains == "scanalyzer3d"] <- "Scanalyzer"
domains[domains == "woodworking"] <- "Woodworking"
data$domain <- domains
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
View(data)
library(dplyr)
source("Tools/style.R")
source("Tools/tables.R")
source("Tools/scatterPlots.R")
source("Tools/graphNames.R")
# Handle arguments
args = commandArgs(trailingOnly=TRUE)
args[1] <- "general.csv"
args[2] <- "CPDDLMutexed"
if (length(args) != 2) {
stop("2 arguments must be supplied! The source data file and the method to generate tables for", call.=FALSE)
}
data <- read.csv(
args[1],
header = T,
sep = ",",
colClasses = c(
'character',
'character','numeric',
'numeric','numeric',
'numeric','numeric',
'numeric','numeric'
)
)
data <- rename_domains(data)
data <- data[data$id == args[2],]
data$Total.Refined <- data$Total.Refined - data$Post.Duplicates.Removed
data$Final.Output <- data$Total.Refined - data$Post.Not.Useful.Removed
tableData <- data %>% select(
contains('domain'),
contains('total.candidates'),
contains('pre.not.useful.removed'),
contains('total.refined'),
contains('post.not.useful.removed'),
contains('final.output'))
tableData <- aggregate(. ~ domain, data=tableData, FUN=sum)
generate_table(
tableData,
paste("out/usefulness.tex", sep = ""),
c(
"$Domain$",
"$C$",
"$U_{pre}$",
"$C_{valid}$",
"$U_{post}$",
"$M$"
),
"Usefulness pruning information. $C$ is the initial candidate meta actions. $U_{pre}$ is the candidates removed by the pre-usefulness check. $C_{valid}$ is the valid refinements found in the end.. $U_{post}$ is the candidates removed by the post-usefulness check. $M$ is the final number of meta actions.",
"tab:usefulness"
)
